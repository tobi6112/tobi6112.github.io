<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>spring-boot on Twobiers</title><link>https://twobiers.github.io/tags/spring-boot/</link><description>Recent content in spring-boot on Twobiers</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 19 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://twobiers.github.io/tags/spring-boot/index.xml" rel="self" type="application/rss+xml"/><item><title>The `@Transactional`-Kotlin Mismatch</title><link>https://twobiers.github.io/posts/transactional-kotlin/</link><pubDate>Sat, 19 Nov 2022 00:00:00 +0000</pubDate><guid>https://twobiers.github.io/posts/transactional-kotlin/</guid><description>Recently, I&amp;rsquo;ve worked with a Spring Boot project written Kotlin, which had unexplainable strange behaviour by just looking at the code. Specifically, it is a game within a microservice architecture that is being developed as part of a course.
One of the services is the so called &amp;ldquo;Game service&amp;rdquo; which is responsible for managing the state of the game and letting players (which are services by themselves) join a game. Once a player has joined a game, a asynchronous communication channel is created for the player as we tend to develop the service landscape in an event-driven architecture.</description></item></channel></rss>