[{"content":"Hi, I\u0026rsquo;m Tobi. Well, also I\u0026rsquo;m Arno, Walter, Hans, Starney - way to many pseudonyms on the web.\nOn this page I want to manifest my personality, try some new creative things and train writing skills.\n","date":"November 19, 2022","permalink":"/about/","section":"twobiers","summary":"Hi, I\u0026rsquo;m Tobi. Well, also I\u0026rsquo;m Arno, Walter, Hans, Starney - way to many pseudonyms on the web.\nOn this page I want to manifest my personality, try some new creative things and train writing skills.","title":"About Me"},{"content":"As the description already mentions, this is the place where I write stupid stuff. It can vary from IT and coding over music to philosphic thoughts.\nI want to emphasize that this blog won\u0026rsquo;t be always correct. I may change my thinking over time, the blog may not reflect these changes or you won\u0026rsquo;t notice a change. On this blog I won\u0026rsquo;t publish new patterns or a ground-breaking new scientific achievement. Take this blog as a journal, a documentation of my personal experiences, that may vary, evolve and change over time.\n","date":"November 19, 2022","permalink":"/posts/","section":"Blog","summary":"As the description already mentions, this is the place where I write stupid stuff. It can vary from IT and coding over music to philosphic thoughts.\nI want to emphasize that this blog won\u0026rsquo;t be always correct. I may change my thinking over time, the blog may not reflect these changes or you won\u0026rsquo;t notice a change. On this blog I won\u0026rsquo;t publish new patterns or a ground-breaking new scientific achievement.","title":"Blog"},{"content":"","date":"November 19, 2022","permalink":"/","section":"twobiers","summary":"","title":"twobiers"},{"content":"","date":"November 19, 2022","permalink":"/tags/java/","section":"Tags","summary":"","title":"java"},{"content":"","date":"November 19, 2022","permalink":"/tags/kotlin/","section":"Tags","summary":"","title":"kotlin"},{"content":"","date":"November 19, 2022","permalink":"/tags/spring-boot/","section":"Tags","summary":"","title":"spring-boot"},{"content":"","date":"November 19, 2022","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"Recently, I\u0026rsquo;ve worked with a Spring Boot project written Kotlin, which had unexplainable strange behaviour by just looking at the code. Specifically, it is a game within a microservice architecture that is being developed as part of a course.\nOne of the services is the so called \u0026ldquo;Game service\u0026rdquo; which is responsible for managing the state of the game and letting players (which are services by themselves) join a game. Once a player has joined a game, a asynchronous communication channel is created for the player as we tend to develop the service landscape in an event-driven architecture. The code for this process looks similar to the following (Some parts are omitted and simplified for brevity):\n@Service class GameService { @Transactional fun joinGame(gameId: UUID, playerId: UUID) { val player = playerRepository.findById(playerId).orElseThrow() val game = gameRepository.findById(gameId).orElseThrow() game.joinGame(player) playerQueueManager.setupPlayerQueue(playerId) gameRepository.save(game) } } Seems fine, right? A player joins a game, the exchange is being created and afterwards the modified game with the joined player is saved. What could go wrong? Well, the setupPlayerQueue() call can throw an exception. Let\u0026rsquo;s assume it throws a QueueCreationException if something goes wrong (e.g. broker not available). The exception inherits from the kotlin.Exception type. So what would happen if the message broker is unavailable? I guess everyone would aggree with me, If It would make perfectly sense If a player invoking this method other RPC would get an error message back and should eventually be able to join the game at a later point of time when the broker is available again.\nThe player is not able to join the game again. Why? because the joinGame(player) method will check whether the player is already participating in the game and will throw an exception if so. You might wonder why the player would be participating in the game. I mean, we didn\u0026rsquo;t come to invoking the save() method at all. Well, if you are using a JPA EntityManager within a transaction scope, it isn\u0026rsquo;t required invoking save() on a repository at all. Once the transaction scope is completed, the EntityManager takes care of persisting any changed entity.\nOkay, but why would the EntityManager even persist the changed entity? I mean, we have thrown a exception. Shouldn\u0026rsquo;t the transaction be marked for rollback? Clearly it should. RTFM!\nIf no custom rollback rules are configured in this annotation, the transaction will roll back on RuntimeException and Error but not on checked exceptions.\nSource: Spring @Transactional Annotation\nBy default checked exceptions do not result in the transactional interceptor marking the transaction for rollback and instances of RuntimeException and its subclasses do. This default behavior can be modified by specifying exceptions that result in the interceptor marking the transaction for rollback and/or exceptions that do not result in rollback.\nSource: Java EE @Transactional Annotation\nEasy. Everything should be rolled back as Kotlin doesn\u0026rsquo;t have checked exceptions at all we\u0026rsquo;re good to go.\nLet\u0026rsquo;s take a closer look at the previous javadoc.\nBy default checked exceptions do not result in the transactional interceptor marking the transaction for rollback and instances of RuntimeException and its subclasses do.\nAnd here\u0026rsquo;s the cause of the problem. The Kotlin compiler \u0026ldquo;bridges\u0026rdquo; the type kotlin.Exception to java.lang.Exception resulting in all exceptions being effectively checked exceptions during runtime. This design decision is quite understandable, especially when thinking about the interoperability between Kotlin and Java.\nHowever, let\u0026rsquo;s think about the consequences. No thrown Exception of type kotlin.Exception within a method marked as @Transactional will result in a rollback by default. And there is even more to it. You wouldn\u0026rsquo;t even notice the issue in your integration tests, because test transactions are rolled back by default. It will work fine in tests and crash in production. By Design. Nice!\nIn my opionion this is a huge mismatch and I bet that this behavior will cause more bugs like this.\nSo what can I do to\nDon\u0026rsquo;t use the kotlin.Exception type, use java.lang.RuntimeException instead. (I guess nobody will do that in a kotlin project) Explicitly add the kotlin.Exception type to the @Transactional annotation (This is what I did) @Transactional(rollbackOn = [Exception::class]) fun joinGame(gameId: UUID, playerId: UUID) { } Customize the spring transaction manager. An issue tracking this on the Spring Framework can be found here: https://github.com/spring-projects/spring-framework/issues/23473\nComments here: https://github.com/twobiers/twobiers.github.io/issues/1\nP.S.: Technically, I lied in this post. I\u0026rsquo;ve experienced the issue in another part of the code, but I find the join semantics and code is a better fit for explaining the context as it is more accessible.\nAppendix # Here is a test case validating my statements JavaRuntimeException.java\n// JavaRuntimeException.java public class JavaRuntimeException extends RuntimeException { public JavaRuntimeException() { super(\u0026#34;This is a Java runtime exception\u0026#34;); } } KotlinException.kt\nclass KotlinException : Exception(\u0026#34;This is a Kotlin exception\u0026#34;) { override val message: String get() = \u0026#34;This is a Kotlin exception\u0026#34; } TransactionExceptionTest.kt\n@SpringBootTest @Import(TransactionExceptionTest.TestService::class) @Transactional class TransactionExceptionTest { @Component class TestService { @Transactional fun throwKotlin() { val e = KotlinException() println(e.javaClass.superclass) throw e } @Transactional fun throwJava() { val e = JavaRuntimeException() println(e.javaClass.superclass) throw e } } @Autowired lateinit var testService: TestService @Autowired lateinit var tm: PlatformTransactionManager @Autowired lateinit var td: TransactionDefinition @Test fun testKotlinTransaction() { val transaction = tm.getTransaction(td) assert(!transaction.isRollbackOnly) assertThrows\u0026lt;Exception\u0026gt; { testService.throwKotlin() } assert(transaction.isRollbackOnly) } @Test fun testJavaTransaction() { val transaction = tm.getTransaction(td) assert(!transaction.isRollbackOnly) assertThrows\u0026lt;Exception\u0026gt; { testService.throwJava() } assert(transaction.isRollbackOnly) } } ","date":"November 19, 2022","permalink":"/posts/transactional-kotlin/","section":"Blog","summary":"Recently, I\u0026rsquo;ve worked with a Spring Boot project written Kotlin, which had unexplainable strange behaviour by just looking at the code. Specifically, it is a game within a microservice architecture that is being developed as part of a course.\nOne of the services is the so called \u0026ldquo;Game service\u0026rdquo; which is responsible for managing the state of the game and letting players (which are services by themselves) join a game. Once a player has joined a game, a asynchronous communication channel is created for the player as we tend to develop the service landscape in an event-driven architecture.","title":"The @Transactional-Kotlin Mismatch"},{"content":"There is a german joke:\nMein Name ist Tobias - englisch für \u0026ldquo;zwei Bier\u0026rdquo;\nWhich translates into:\nMy name is Tobias - english for \u0026ldquo;two beers\u0026rdquo;\n","date":"April 22, 2022","permalink":"/posts/twobiers/","section":"Blog","summary":"There is a german joke:\nMein Name ist Tobias - englisch für \u0026ldquo;zwei Bier\u0026rdquo;\nWhich translates into:\nMy name is Tobias - english for \u0026ldquo;two beers\u0026rdquo;","title":"Twobiers"},{"content":"How to set goals in life? Is it really the right approach to say \u0026ldquo;I want to run a marathon\u0026rdquo; or \u0026ldquo;I want to be successful\u0026rdquo;?\nWouldn\u0026rsquo;t it be better if we just step down the latter by setting upper bounds we don\u0026rsquo;t want to pass?\nWe might stick to the approach of dividing the big goal into smaller pieces like \u0026ldquo;I want to run 5km\u0026rdquo;. If we achieve this goal we increase the goal to \u0026ldquo;I want to run 10km\u0026rdquo; until we match the big goal. But even by dividing into smaller pieces we will get frustrated and distracted if it does not work out right away.\nInstead of \u0026ldquo;I want to run 5km\u0026rdquo; we might set the upper bound for our failures, maybe like \u0026ldquo;I don\u0026rsquo;t want to be puffed after 2km\u0026rdquo;.\nWill we be less frustrated? Will it support to adapt small changes in life that grow up to the big life goal?\n","date":"January 5, 2022","permalink":"/posts/negotiate_life_goals/","section":"Blog","summary":"How to set goals in life? Is it really the right approach to say \u0026ldquo;I want to run a marathon\u0026rdquo; or \u0026ldquo;I want to be successful\u0026rdquo;?\nWouldn\u0026rsquo;t it be better if we just step down the latter by setting upper bounds we don\u0026rsquo;t want to pass?\nWe might stick to the approach of dividing the big goal into smaller pieces like \u0026ldquo;I want to run 5km\u0026rdquo;. If we achieve this goal we increase the goal to \u0026ldquo;I want to run 10km\u0026rdquo; until we match the big goal.","title":"Is The Negation Of Life Goals The Key To Success?"},{"content":"","date":"January 5, 2022","permalink":"/tags/quick-think/","section":"Tags","summary":"","title":"quick think"},{"content":"","date":"January 1, 1","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"January 1, 1","permalink":"/series/","section":"Series","summary":"","title":"Series"}]